---
apiVersion: v1
kind: Secret
metadata:
  name: dolistock
  namespace: $OKTETO_NS
  labels:
    app.kubernetes.io/name: dolistock
    app.kubernetes.io/instance: dolistock
type: Opaque
stringData:
  DOLI_ADMIN_LOGIN: ${DOLI_ADMIN_LOGIN}
  DOLI_ADMIN_PASSWORD: ${DOLI_ADMIN_PASSWORD}
  DOLI_DB_NAME: ${DOLI_DB_NAME}
  DOLI_DB_USER: ${DOLI_DB_USER}
  DOLI_DB_PASSWORD: ${DOLI_DB_PASSWORD}
  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  MYSQL_DATABASE: ${DOLI_DB_NAME}
  MYSQL_USER: ${DOLI_DB_USER}
  MYSQL_PASSWORD: ${DOLI_DB_PASSWORD}
  ALLOWED_SENDER_DOMAINS: ${ALLOWED_SENDER_DOMAINS}
  DKIM_PRIVATE_KEY: ${DKIM_PRIVATE_KEY}
  DKIM_SELECTOR: ${DKIM_SELECTOR}
  POSTFIX_HOSTNAME: ${POSTFIX_HOSTNAME}
  CLOUDFLARE_DNS_RECORDS: ${CLOUDFLARE_DNS_RECORDS}
  CLOUDFLARE_ZONE_ID: ${CLOUDFLARE_ZONE_ID}
  CLOUDFLARE_API_KEY: ${CLOUDFLARE_API_KEY}
  POSTFIX_myhostname: ${POSTFIX_HOSTNAME}
  POSTFIX_helo_name: ${POSTFIX_HOSTNAME}
  crontabui-user: ${BASIC_AUTH_USER}
  crontabui-password: ${BASIC_AUTH_PWD}
  API_LAYER_KEY: ${API_LAYER_KEY}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: dolidock-data
  name: dolidock-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  volumeMode: Filesystem
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mysql-data
  name: mysql-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
status: {}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ismoerp
  namespace: $OKTETO_NS
  annotations:
    # dev.okteto.com/generate-host: "true"
spec:
  rules:
    - host: $OKTETO_FQDN_DOLISTOCK
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dolidock
                port:
                  number: 80
    - host: admin-$OKTETO_NS.cloud.okteto.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: phpmyadmin      
                port: 
                  number: 80
    - host: crontabui-$OKTETO_NS.cloud.okteto.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: crontabui
                port:
                  number: 8000

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o okteto/k8s.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: smtpd
  name: smtpd
spec:
  ports:
    - name: "25"
      port: 25
      targetPort: 25
  selector:
    io.kompose.service: smtpd
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o okteto/k8s.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: smtpd
  name: smtpd
spec:
  replicas: ${SMTPD_REPLICAS}
  selector:
    matchLabels:
      io.kompose.service: smtpd
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o okteto/k8s.yml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: smtpd
    spec:
      containers:
        - env:
            - name: ALLOWED_SENDER_DOMAINS
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: ALLOWED_SENDER_DOMAINS
            - name: DKIM_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DKIM_PRIVATE_KEY
            - name: DKIM_SELECTOR
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DKIM_SELECTOR
            - name: CLOUDFLARE_ZONE_ID
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: CLOUDFLARE_ZONE_ID
            - name: CLOUDFLARE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: CLOUDFLARE_API_KEY
            - name: CLOUDFLARE_DNS_RECORDS
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: CLOUDFLARE_DNS_RECORDS
            - name: POSTFIX_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: POSTFIX_HOSTNAME
            - name: POSTFIX_myhostname
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: POSTFIX_myhostname
            - name: POSTFIX_helo_name
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: POSTFIX_helo_name
          image: ismogroup/docker-smtp-relay:latest
          name: smtpd
          ports:
            - containerPort: 25
          resources:
            limits:
              cpu: 900m
              memory: "322122547"
          volumeMounts:
            - mountPath: /var/www/dolidock
              name: dolidock-data
      volumes:
        - name: dolidock-data
          persistentVolumeClaim:
            claimName: dolidock-data
      restartPolicy: Always
status: {}


---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o okteto/k8s.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: mysql
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mysql
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: mysql
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: MYSQL_PASSWORD
          image: mysql:latest
          name: mysql
          ports:
            - containerPort: 3306
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      restartPolicy: Always
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: dolidock
  name: dolidock
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  selector:
    io.kompose.service: dolidock
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: dolidock
  name: dolidock
spec:
  replicas: ${DOLIDOCK_REPLICAS}
  selector:
    matchLabels:
      io.kompose.service: dolidock
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: dolidock
    spec:
      containers:
        - env:
            - name: DOLI_ADMIN_LOGIN
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_ADMIN_LOGIN
            - name: DOLI_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_ADMIN_PASSWORD
            - name: DOLI_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_DB_NAME
            - name: DOLI_DB_USER
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_DB_USER
            - name: DOLI_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_DB_PASSWORD
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: MYSQL_ROOT_PASSWORD
            - name: DOLI_DB_TYPE
              value: mysqli
            - name: DOLI_DB_HOST
              value: mysql
            - name: DOLI_DB_HOST_PORT
              value: '3306'
            - name: DOLI_URL_ROOT
              value: 'https://${OKTETO_FQDN_DOLISTOCK}'
            - name: WWW_USER_ID
              value: '1000'
            - name: WWW_GROUP_ID
              value: '1000'
          image: ismogroup/dolidock:latest
          name: dolidock
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: "1"
              memory: "3Gi"
          volumeMounts:
            - mountPath: /var/www/dolidock/documents
              name: dolidock-data
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      restartPolicy: Always
      volumes:
        - name: dolidock-data
          persistentVolumeClaim:
            claimName: dolidock-data
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: phpmyadmin
  name: phpmyadmin
spec:
  type: ClusterIP
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  selector:
    io.kompose.service: phpmyadmin
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: phpmyadmin
  name: phpmyadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: phpmyadmin
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: phpmyadmin
    spec:
      containers:
        - env:
            - name: PMA_HOST
              value: "mysql"
          image: phpmyadmin:latest
          name: phpmyadmin
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: "0.25"
              memory: "512M"
      restartPolicy: Always
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: crontabui-data
  name: crontabui-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: crontabui
  name: crontabui
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: crontabui
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: crontabui
    spec:
      containers:
        - env:
            - name: BASIC_AUTH_USER
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: crontabui-user
            - name: BASIC_AUTH_PWD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: crontabui-password
          image: highcanfly/crontab-ui:latest
          name: crontabui
          ports:
            - containerPort: 8000
          resources:
            limits:
              cpu: 250m
              memory: "214748364"
          volumeMounts:
            - mountPath: /opt/cron
              name: crontabui-data
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      restartPolicy: Always
      volumes:
        - name: crontabui-data
          persistentVolumeClaim:
            claimName: crontabui-data
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: crontabui
  name: crontabui
spec:
  ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
  selector:
    io.kompose.service: crontabui
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: dolirate
  name: dolirate
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: dolirate
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: dolirate
  name: dolirate
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: dolirate
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: dolirate
    spec:
      containers:
        - env:
            - name: MYSQL_HOST
              value: mysql
            - name: MYSQL_PORT
              value: '3306'
            - name: DOLI_DB_USER
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_DB_USER
            - name: DOLI_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_DB_PASSWORD
            - name: DOLI_DB_PREFIX
              value: llx_
            - name: DOLI_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: DOLI_DB_NAME
            - name: API_LAYER_KEY
              valueFrom:
                secretKeyRef:
                  name: dolistock
                  key: API_LAYER_KEY
          image: ismogroup/dolirate:latest
          name: dolirate
          ports:
            - containerPort: 3000
          resources:
            limits:
              cpu: 250m
              memory: "100M"
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      restartPolicy: Always
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: memcached
  name: memcached
spec:
  ports:
    - name: "11211"
      port: 11211
      targetPort: 11211
  selector:
    io.kompose.service: memcached
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: memcached
  name: memcached
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: memcached
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/dolidock-default: "true"
        io.kompose.service: memcached
    spec:
      containers:
        - args:
            - memcached
            - -m
            - "1024"
          image: memcached:alpine
          name: memcached
          ports:
            - containerPort: 11211
          resources:
            limits:
              cpu: 250m
              memory: "1Gi"
      restartPolicy: Always
status: {}
